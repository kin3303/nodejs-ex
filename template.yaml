apiVersion: v1
kind: Template
labels:
  template: cloudbees-cd-pipline
  xpaas: 1.3.2
metadata:
  name: ${NAME}
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${NAME}"
  stringData:
    database-user: "${DATABASE_USER}"
    database-password: "${DATABASE_PASSWORD}"
    database-admin-password: "${DATABASE_ADMIN_PASSWORD}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: "${NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: nodejs:${NODEJS_VERSION}
        env:
        - name: NPM_MIRROR
    output:
      to:
        kind: DockerImage
        name: "registry.letsgohomenow.com/${NAME}:${TAG_NAME}"
      pushSecret:
        name: nexus
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    strategy:
      type: Recreate
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: "${NAME}"
          image: "registry.letsgohomenow.com/${NAME}:${TAG_NAME}"
          ports:
          - containerPort: 8080
          env:
          - name: DATABASE_SERVICE_NAME
            value: "${DATABASE_SERVICE_NAME}"
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-user
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-password
          - name: MONGODB_DATABASE
            value: "${DATABASE_NAME}"
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-admin-password
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 3
            httpGet:
              path: "/"
              port: 8080
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 30
            httpGet:
              path: "/"
              port: 8080
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
- kind: Service
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    strategy:
      type: Recreate
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - name: mongodb
          image: >-
            172.30.1.1:5000/openshift/mongodb@sha256:4ebc0868f577121f0bcaf9c5265a8508d58e407c553099ff8f45b19b07a51a92
          ports:
          - containerPort: 27017
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-user
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-password
          - name: MONGODB_DATABASE
            value: "${DATABASE_NAME}"
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "${NAME}"
                key: database-admin-password
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
          resources:
            limits:
              memory: "${MEMORY_MONGODB_LIMIT}"
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/mongodb/data"
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
parameters:
- name: NAME
  required: true
  value: nodejs-mongo-persistent
- name: NODEJS_VERSION
  value: '8'
  required: true
- name: MEMORY_LIMIT
  required: true
  value: 512Mi
- name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi
- name: VOLUME_CAPACITY
  value: 1Gi
  required: true
- name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/kin3303/nodejs-ex.git
- name: APPLICATION_DOMAIN
  required: true
  value: ""
- name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- name: DATABASE_USER
  generate: expression
  value: dbuser
- name: DATABASE_PASSWORD
  generate: expression
  value: dbpw
- name: DATABASE_NAME
  required: true
  value: sampledb
- name: DATABASE_ADMIN_PASSWORD
  generate: expression
  value: dbadminpw
- name: TAG_NAME
  required: true
  value: latest
